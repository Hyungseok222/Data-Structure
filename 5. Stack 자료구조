#include <iostream>

using namespace std;

/*스택 공부하기*/
// 배열을 통한 Stack 구현

typedef struct _stack {
	int* stack; // 동적할당 받는 배열로 선언
	int size; // stack이 받을 수 있는 데이터 저장 공간 크기 size = 5) stack 배열 크기가 5.
	int top; // 데이터가 쌓인 갯수 데이터 입출력을 받는 가장 윗부분  top=3) 3개까지 쌓였다!
}Stack;

bool createStack(Stack* sp, int size);
bool isStackFull(Stack* sp);
bool isStackEmpty(Stack* sp);
bool push(Stack* sp, int inData);
bool pop(Stack* sp, int *popData);
void printStack(const Stack* sp);
bool destroyStack(Stack* sp);


int main() {
	Stack stk;
	const char* menuList[] = { "1.입력하기","2.삭제하기" ,"3.출력하기." ,"4.종 료" };
	int menuCnt;
	int menuNum;

	createStack(&stk, 5);
	menuCnt = sizeof(menuList) / sizeof(menuList[0]);

	cout << endl;

	for (int i = 0; i < menuCnt; i++) {
		cout << menuList[i] << endl;
	}

	while (1) {
		cout << endl;
		cout << "# 숫자 입력:";
		cin >> menuNum; // menuNum은 int 형 자료이므로 int가 입력되었는지 확인 필요

		if (cin.fail()) { // int 이외 자료형이 들어오면 break
			break;
		}

		if (menuNum == 1) { // 데이터 입력하기
			int data;
			for (int i = 0; i < 5; i++) {
				if (stk.top == 5) { // 스택메모리가 꽉 찼으면 더 이상 입력 받지 않고 while문으로 복귀하기
					continue; 
				}
				cout << "입력할 데이터:";
				cin >> data;
				push(&stk, data);
			}
		}
		else if (menuNum == 2) { // 데이터 삭제주기
			int datum;
			pop(&stk, &datum);
			cout << "데이터 " << datum << "가 삭제 되었습니다." << endl;
		}
		else if (menuNum == 3) { // 데이터 출력하기
			printStack(&stk);
		}

		else if (menuNum == 4) { // 종료
			break;
		}

	}
	destroyStack(&stk);

	return 0;
}

bool createStack(Stack* sp, int size) {
	if (sp == NULL) {
		return false;
	}

	sp->stack = (int*)calloc(size,sizeof(int)); //sp는 스택이 아니라. 스택관리 구조체임
	if (sp->stack == NULL) {
		return false;
	}
	else {
		cout << "스택 메모리 생성 성공!" << endl;
		sp->top = 0;
		sp->size = size;
		return true;
	}

}

bool isStackFull(Stack* sp) {
	if (sp == NULL) {
		return false;
	}

	if (sp->top == sp->size ) {
		return true;
	}
	else {
		return false;
	}
}

bool isStackEmpty(Stack* sp) {
	if (sp == NULL) {
		return false;
	}

	if(sp->top == 0) {
		return true;
	}
	else {
		return false;
	}
}

bool push(Stack* sp, int inData) {
	if (sp == NULL) {
		return false;
	}

	if (isStackFull(sp)) { // 해당 함수 반환값이 true면,
		return false;
	}
	else {
		sp->stack[sp->top] = inData;
		sp->top++;
		return true;
	}
}

bool pop(Stack* sp, int *popData) {
	if (sp == NULL) {
		return false;
	}

	if (isStackEmpty(sp)) {
		return false;
	}
	else {
		sp->top--;
		*popData = sp->stack[sp->top];
		
		return true;
	}
}

void printStack(const Stack* sp) {
	int i = sp->top;

	if (sp == NULL) {
		return;
	}

	for (int j = 0; j < i; j++) {
		cout << sp->stack[j] << endl;
	}
}

bool destroyStack(Stack* sp) {
	if (sp == NULL) {
		return false;
	}

	if (sp->stack != NULL) {
		free(sp->stack);
	}

	sp->stack = NULL;
	sp->size = 0;
	sp->top = 0;
}














// 리스트를 이용한 Stack 구현

#include <iostream>

using namespace std;

/*스택 공부하기*/


typedef struct _node Node;
struct _node {
	int data;
	Node* next;
};

typedef struct _list {
	Node* head;
	Node* tail;
}List;


bool createStack(List *lp);
bool isStackEmpty(List* lp);
bool push(List *lp, int inData);
bool pop(List *lp, int *popData);
void printStack(List *lp);
void destroyStack(List *lp);


int main() {
	List lp;
	const char* menuList[] = { "1.입력하기","2.삭제하기" ,"3.출력하기." ,"4.종 료" };
	int menuCnt;
	int menuNum;

	createStack(&lp);
	menuCnt = sizeof(menuList) / sizeof(menuList[0]);

	cout << endl;

	for (int i = 0; i < menuCnt; i++) {
		cout << menuList[i] << endl;
	}

	while (1) {
		cout << endl;
		cout << "# 숫자 입력:";
		cin >> menuNum; // menuNum은 int 형 자료이므로 int가 입력되었는지 확인 필요

		if (cin.fail()) { // int 이외 자료형이 들어오면 break
			break;
		}

		if (menuNum == 1) { // 데이터 입력하기
			int data;
			for (int i = 0; i < 5; i++) {
				cout << "입력할 데이터:";
				cin >> data;
				push(&lp, data);
			}
		}
		else if (menuNum == 2) { // 데이터 삭제주기
			int datum;
			pop(&lp, &datum);
			cout << "데이터 " << datum << "가 삭제 되었습니다." << endl;
		}
		else if (menuNum == 3) { // 데이터 출력하기
			printStack(&lp);
		}

		else if (menuNum == 4) { // 종료
			break;
		}

	}
	destroyStack(&lp);

	return 0;
}

bool createStack(List *lp) {
	if (lp == NULL) {
		return false;
	}

	lp->head = (Node*)malloc(sizeof(Node)); //sp는 스택이 아니라. 스택관리 구조체임
	lp->tail = (Node*)malloc(sizeof(Node));
	if (lp->head == NULL || lp->tail == NULL) {
		free(lp->head);
		free(lp->tail);
		return false;
	}
	else {
		lp->head->next = lp->tail;

		lp->tail->next = lp->tail;
		cout << "스택 메모리 생성 성공!" << endl;
		return true;
	}

}

bool isStackEmpty(List *lp) {
	if (lp == NULL) {
		return false;
	}

	if(lp->head->next == lp->tail) {
		return true;
	}
	else {
		return false;
	}
}

bool push(List *lp, int inData) {
	Node* newp;
	if (lp == NULL) {
		return false;
	}
	newp = (Node*)malloc(sizeof(Node));

	if (newp != NULL) {
		newp->data = inData;
		newp->next = lp->head->next;

		lp->head->next = newp;

		return true;
	}
	else {
		return false;
	}
}

bool pop(List *lp, int *popData) {
	Node *temp;
	Node* dp;

	if (lp == NULL) {
		return false;
	}

	temp = (Node*)malloc(sizeof(Node));
	dp = (Node*)malloc(sizeof(Node));
	if (isStackEmpty(lp) == true) {
		return false;
	}

	else {
		if (temp != NULL) {
			*popData = lp->head->next->data;
			temp = lp->head->next;
			lp->head->next = lp->head->next->next;
			free(temp);

			return true;
		}
		else {
			return false;
		}
	}
}

void printStack(List *lp) {
	Node* curp;

	if (lp == NULL) {
		return;
	}
	if (isStackEmpty(lp) == true) {
		cout << "Stack이 비어있습니다." << endl;
		return;
	}

	curp = (Node*)malloc(sizeof(Node));
	curp = lp->head->next;
	while (curp != lp->tail) {
		cout << curp->data << endl;
		curp = curp->next;
	}
	return;
}

void destroyStack(List* lp) {
	Node* curp;
	Node* temp;

	if (lp == NULL) {
		return;
	}

	curp = lp->head->next;
	while (curp != lp->tail) {
		temp = curp->next;
		free(curp);
		curp = temp;
	}
	free(lp->head);
	free(lp->tail);

	lp->head = lp->tail = NULL;
	return;
}





/* 스택 알고리즘 문제 풀어보기 */


/*<파일 입출력을 통해 맨 윗줄에 알파벳으로 된 문장, 둘째 줄에 명령어 개수, 셋째 줄부턴 명령어를 적어두고 한문장씩 읽어내어
주어진 명령어대로 첫번째 문장을 편집해주는 Editer 제작>*/


#include <iostream>
#include <fstream>
#include <string>

/*리스트 스택 이용하기*/

using namespace std;

typedef struct _node Node;
struct _node {
	char data;
	Node* next;
};


typedef struct _stacknode {
	Node* head;
	Node* tail;
}Stack;


bool createStack(Stack* sp);
bool isStackEmpty(const Stack* sp);
bool push(Stack* sp, char inData);
bool pop(Stack* sp, char* popData);
void printStack(const Stack* sp);
void destroyStack(Stack* sp);



int main() {
	Stack lstk, rstk;
	createStack(&lstk);
	createStack(&rstk);
	char data; //pop에서 전달되는 문자 저장용도
	char delData;


	/*파일 입출력 부분*/

	ifstream inFile("editer.txt"); // 각 컴퓨터에 저장된 텍스트 파일 입력
	if (!inFile) {
		cout << "파일을 열 수 없습니다." << endl;
		return 1;
	}

	char word[1000];
	inFile.getline(word, sizeof(word));

	int len = strlen(word);
	for (int j = 0; j < len; j++) {
		cout << word[j];
		push(&lstk, word[j]);
	}

	int arraySize;
	inFile >> arraySize;


	char* array = new char[arraySize];

	for (int i = 0; i < arraySize; i++) {
		inFile >> array[i];
		// 여기에 들어오는 문자에 따라 함수 실행하도록 코드짜기
		if (array[i] == 'L') { // 커서가 왼쪽으로 이동
			pop(&lstk, &data);
			push(&rstk, data);
		}
		else if (array[i] == 'D') {// 커서가 오른쪽으로 이동
			pop(&rstk, &data);
			push(&lstk, data);
		}
		else if (array[i] == 'B') {
			pop(&lstk, &delData);
		}
		else if (array[i] == 'P') {
			char px;
			inFile >> px;
			push(&lstk, px);
		}
		else {
			break;
		}
	}
	cout << endl;
	cout << endl;
	cout << "========================= 편집 결과 ===========================" << endl;
	cout << endl;
	while (pop(&lstk, &data)) {
		push(&rstk, data);
	}
	printStack(&rstk);
	


	destroyStack(&lstk);
	destroyStack(&rstk);
	delete[] array;
	return 0;
}


bool createStack(Stack* sp) {
	if (sp == NULL) {
		return false;
	}

	sp->head = new Node;
	sp->tail = new Node;

	if (sp->head == NULL || sp->tail == NULL) {
		free(sp->head);
		free(sp->tail);
		return false;
	}
	else {
		sp->head->next = sp->tail;
		sp->tail->next = sp->tail;
		cout << "스택 메모리 생성 성공!" << endl;
		return true;
	}
}

bool isStackEmpty(const Stack* sp) {
	if (sp == NULL) {
		return false;
	}

	if (sp->head->next == sp->tail) {
		return true;
	}
	else {
		return false;
	}
}

bool push(Stack* sp, char inData) {
	Node* newp;
	if (sp == NULL) {
		return false;
	}
	newp = new Node;

	if (newp != NULL) {
		newp->data = inData;
		newp->next = sp->head->next;

		sp->head->next = newp;

		return true;
	}
	else {
		return false;
	}
}

bool pop(Stack* sp, char* popData) {
	Node* temp;

	if (sp == NULL) {
		return false;
	}

	if (isStackEmpty(sp) == true) {
		return false;
	}

	temp = sp->head->next;
	*popData = temp->data;
	sp->head->next = temp->next;
	delete temp; // Use 'delete' instead of 'free'


	return true;
}

void printStack(const Stack* sp) {
	Node* curp;

	if (sp == NULL) {
		return;
	}
	if (isStackEmpty(sp) == true) {
		cout << "Stack이 비어있습니다." << endl;
		return;
	}

	curp = sp->head->next;
	while (curp != sp->tail) {
		cout << curp->data;
		curp = curp->next;
	}
	return;
}

void destroyStack(Stack* sp) {
	Node* curp;
	Node* temp;

	if (sp == NULL) {
		return;
	}

	curp = sp->head->next;
	while (curp != sp->tail) {
		temp = curp->next;
		delete curp;
		curp = temp;
	}
	delete sp->head;
	delete sp->tail;

	sp->head = sp->tail = NULL;
	return;
}
